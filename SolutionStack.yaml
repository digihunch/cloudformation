### Prerequisite
# line 366 and line 368 should point to correct destination

# This is just a prototype. lots of improvement needed
# Todo: 
#   1. download installer into /tmp
#   2. make get-asg-nodes.sh to work
#   3. change SIGNAL to issue after installation
#   4. double AZ deployment
#   5. parameter group in script
#   6. Output in script
#   7. clarify the cfn cloud log and process and cfn metadata, condition
#   8. write summary in glowing hunch

#Metadata:
#  AWS::CloudFormation::Interface:
#    ParameterGroups:

Parameters:
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
    Description: Environment Size (SMALL=1,1,1 MEDIUM=3,3,3 LARGE=5,5,5)
  ApplicationInstanceType:
    Type: String
    Default: t2.micro
  DatabaseInstanceType:
    Type: String
    Default: t2.micro
  SearchEngineInstanceType:
    Type: String
    Default: t2.micro
  DatabaseInstaller:
    Type: String
    Default: Database-Installer.sh
  ApplicationInstaller:
    Type: String
    Default: Application-Installer.sh
  SearchEngineInstaller:
    Type: String
    Default: SearchEngine-Installer.sh
  InstallerPath:
    Type: String
    Default: https://vc-install.s3.amazonaws.com/
#Conditions:
#  isLarge:
#    !Equals [!Ref EnvironmentSize, "LARGE"]
#  isntLarge:
#    !Not [!Equals [!Ref EnvironmentSize, "LARGE"]]
Mappings:
  RegionMap:
    us-east-1:
      AMALINUX: ami-0080e4c5bc078760e
      NATAMI: ami-00a9d4a05375b2763
    us-east-2:
      AMALINUX: ami-0cd3dfa4e37921605
      NATAMI: ami-00d1f8201864cc10c
    us-west-1:
      AMALINUX: ami-0ec6517f6edbf8044
      NATAMI: ami-097ad469381034fa2
    us-west-2:
      AMALINUX: ami-01e24be29428c15b2
      NATAMI: ami-0b840e8a1ce4cdf15
    sa-east-1:
      AMALINUX: ami-05145e0b28ad8e0b2
      NATAMI: ami-057f5d52ff7ae75ae
    ca-central-1:
      AMALINUX: ami-07423fb63ea0a0930
      NATAMI: ami-0b32354309da5bba5
    eu-west-1:
      AMALINUX: ami-08935252a36e25f85
      NATAMI: ami-024107e3e3217a248
    eu-west-2:
      AMALINUX: ami-01419b804382064e4
      NATAMI: ami-0ca65a55561666293
    eu-west-3:
      AMALINUX: ami-0dd7e7ed60da8fb83
      NATAMI: ami-0641e4dfc1427f114
    eu-central-1:
      AMALINUX: ami-0cfbf4f6db41068ac
      NATAMI: ami-06a5303d47fbd8c60
    ap-southeast-1:
      AMALINUX: ami-05b3bcf7f311194b3
      NATAMI: ami-01514bb1776d5c018
    ap-southeast-2:
      AMALINUX: ami-02fd0b06f06d93dfc
      NATAMI: ami-062c04ec46aecd204
    ap-northeast-1:
      AMALINUX: ami-00a5245b4816c38e6
      NATAMI: ami-00d29e4cb217ae06b
    ap-northeast-2:
      AMALINUX: ami-00dc207f8ba6dc919
      NATAMI: ami-0d98591cbf9ef1ffd
    ap-south-1:
      AMALINUX: ami-0ad42f4f66f6c1cc9
      NATAMI: ami-00b3aa8a93dd09c13

  InstanceCount:
    SMALL:
      "InstCnt" : 1
    MEDIUM:
      "InstCnt" : 3
    LARGE:
      "InstCnt" : 5
Resources:
  InstIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "InstallerIAMRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "ec2.amazonaws.com"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AutoScalingReadOnlyAccess
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "InstallerIAMRole"
      Path: "/"
      Roles:
        - Ref: InstIAMRole
  SolutionStackVPC:
    Type: AWS::EC2::VPC
    Properties:
       CidrBlock: 10.0.0.0/26
       EnableDnsSupport: true
       EnableDnsHostnames: true
       Tags:
        - Key: Name
          Value: Solution Stack VPC
  SolutionStackIGW:
    Type: AWS::EC2::InternetGateway
    DependsOn: SolutionStackVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SolutionStackVPC
      InternetGatewayId: !Ref SolutionStackIGW
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SolutionStackVPC
      Tags:
       - Key: Name
         Value: Public Route Table
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SolutionStackIGW
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SolutionStackVPC
      GroupDescription: App Security Group for Solution servers at app layer
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        ToPort: 22
        FromPort: 22
      - IpProtocol: tcp
        CidrIp: 10.0.0.0/26
        ToPort: 80
        FromPort: 80
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        ToPort: 443
        FromPort: 443
      - IpProtocol: icmp
        FromPort: 8
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: App Security Group for app layer 
  ApplicationSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SolutionStackVPC
      CidrBlock: 10.0.0.0/28
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      Tags:
        - Key: Name
          Value: Application Subnet
  DatabaseSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SolutionStackVPC
      CidrBlock: 10.0.0.16/28
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      Tags:
        - Key: Name
          Value: Database Subnet
  SearchEngineSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SolutionStackVPC
      CidrBlock: 10.0.0.32/28
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      Tags:
        - Key: Name
          Value: Search Engine Subnet

  ApplicationSubnetAssociationWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ApplicationSubnet

  ApplicationLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !Ref ApplicationInstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: yi_cs
      SecurityGroups:
        - !Ref AppSecurityGroup
#      Tags:
#        -
#          Key: Name
#          Value: Application Node
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap 
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ApplicationServerGroup --configsets solution_cs --region ${AWS::Region}
            yum -y update
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ApplicationServerGroup --region ${AWS::Region}
            aws configure set region ${AWS::Region}
            runuser -l ec2-user -c 'aws configure set region ${AWS::Region}'

  NATInstance:
    Type: AWS::EC2::Instance
    Properties:
      # in order to get NAT instance to work, NAT image should be used instead of regular EC2 image. Security group should allow ICMP as well; SourceDestCheck should turn off
      # although the instruction mentions the main route table should be the one that points to NAT instance, it seems to be working without that being main route table.
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", NATAMI]
      InstanceType: !Ref ApplicationInstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: yi_cs
      SubnetId:  !Ref ApplicationSubnet 
      SecurityGroupIds:  
        - !Ref AppSecurityGroup
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: NAT Instance
  ApplicationServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Ref: ApplicationSubnet
      LaunchConfigurationName:
        Ref: ApplicationLaunchConfig
      MinSize: !FindInMap [InstanceCount, !Ref EnvironmentSize, InstCnt]
      MaxSize: !FindInMap [InstanceCount, !Ref EnvironmentSize, InstCnt]
      Tags:
        - Key: Name
          Value: Application Node
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [InstanceCount, !Ref EnvironmentSize, InstCnt]
        Timeout: PT5M
    DeletionPolicy: Delete
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          solution_cs:
            - "configure_cfn"
            - "pull_node_installer"
            - "install_node"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SearchEngineServerGroup --configsets solution_cs --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        pull_node_installer:
          files:
            /home/ec2-user/get-asg-nodes.sh:
              content: |
                #!/bin/bash
                for i in `aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name $1 | grep -i instanceid  | awk '{ print $2}' | cut -d',' -f1| sed -e 's/"//g'`
                do
                aws ec2 describe-instances --instance-ids $i | grep -i PrivateIpAddress | awk '{ print $2 }' | head -1 | cut -d"," -f1
                done
              mode: "000755"
              owner: ec2-user
              group: ec2-user
          sources:
            /tmp: !Join ["", [!Ref InstallerPath, !Ref ApplicationInstaller]]
#          services:
#            sysvinit:
#              iptables:
#                enabled: "true"
#                ensureRunning: "true"
        install_node:
          commands:
            01_print_nodes_in_layer:
              cwd: "/home/ec2-user"
              command: get-asg-nodes.sh '${ApplicationServerGroup.AutoScalingGroupName}' > application_nodes.txt
            02_execute_installer:
              cwd: "/tmp"
              command: Application-Installer.sh
#
  # Private Security Group
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SolutionStackVPC
      GroupDescription: Private Security Group for Solution servers at db or se layer
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        ToPort: 22
        FromPort: 22
      - IpProtocol: tcp
        CidrIp: 10.0.0.0/26
        ToPort: 80
        FromPort: 80
      - IpProtocol: icmp
        FromPort: 8
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Private Security Group for db or se layers 


  EndPointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SolutionStackVPC
      GroupDescription: Traffic into VPC Endpoint
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        ToPort: 443
        FromPort: 443
      Tags:
        - Key: Name
          Value: Endpoint Security Group

  # Create an AWS Private Link to allow private instances to signal AWS CloudFormation WaitConditions
  # https://aws.amazon.com/blogs/mt/signaling-aws-cloudformation-waitconditions-using-aws-privatelink/
  CfnEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref SolutionStackVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.cloudformation"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref DatabaseSubnet
#        - !Ref SearchEngineSubnet
#   if two subnets sit on the same AZ, then only one subnet Id can be specified here. 2019.07.10
      SecurityGroupIds:
        - !Ref EndPointSecurityGroup
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SolutionStackVPC
  # Add Private Route once NAT instance is created in public subnet
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance
  DatabaseSubnetAssociationWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DatabaseSubnet
  SearchEngineSubnetAssociationWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SearchEngineSubnet
  DatabaseLaunchConfig:
    DependsOn: DatabaseSubnetAssociationWithRouteTable
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !Ref DatabaseInstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      AssociatePublicIpAddress: false
      KeyName: yi_cs
      SecurityGroups:
        - !Ref PrivateSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DatabaseServerGroup --configsets solution_cs --region ${AWS::Region}
            yum -y update
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DatabaseServerGroup --region ${AWS::Region}
            aws configure set region ${AWS::Region}
            runuser -l ec2-user -c 'aws configure set region ${AWS::Region}'
  SearchEngineLaunchConfig:
    DependsOn: SearchEngineSubnetAssociationWithRouteTable
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !Ref SearchEngineInstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      AssociatePublicIpAddress: false
      KeyName: yi_cs
      SecurityGroups:
        - !Ref PrivateSecurityGroup
#      Tags:
#        -
#          Key: Name
#          Value: Search Engine Node
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SearchEngineServerGroup --configsets solution_cs --region ${AWS::Region}
            yum -y update
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SearchEngineServerGroup --region ${AWS::Region}
            aws configure set region ${AWS::Region}
            runuser -l ec2-user -c 'aws configure set region ${AWS::Region}'
  DatabaseServerGroup:
    DependsOn: 
      - CfnEndpoint
      - NATInstance
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Ref: DatabaseSubnet
      LaunchConfigurationName: !Ref DatabaseLaunchConfig
      MinSize: !FindInMap [InstanceCount, !Ref EnvironmentSize, InstCnt]
      MaxSize: !FindInMap [InstanceCount, !Ref EnvironmentSize, InstCnt]
      Tags:
        - Key: Name
          Value: Database Node
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [InstanceCount, !Ref EnvironmentSize, InstCnt]
        Timeout: PT5M
    DeletionPolicy: Delete
  SearchEngineServerGroup:
    DependsOn: 
      - CfnEndpoint
      - NATInstance
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Ref: SearchEngineSubnet
      LaunchConfigurationName: !Ref SearchEngineLaunchConfig
      MinSize: !FindInMap [InstanceCount, !Ref EnvironmentSize, InstCnt]
      MaxSize: !FindInMap [InstanceCount, !Ref EnvironmentSize, InstCnt]
      Tags:
        - Key: Name
          Value: Search Engine Node
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [InstanceCount, !Ref EnvironmentSize, InstCnt]
        Timeout: PT5M
    DeletionPolicy: Delete
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          solution_cs:
            - "configure_cfn"
            - "pull_node_installer"
            - "install_node"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SearchEngineServerGroup --configsets solution_cs --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        pull_node_installer:
          files:
            /home/ec2-user/get-asg-nodes.sh:
              content: |
                #!/bin/bash
                for i in `aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name $1 | grep -i instanceid  | awk '{ print $2}' | cut -d',' -f1| sed -e 's/"//g'`
                do
                aws ec2 describe-instances --instance-ids $i | grep -i PrivateIpAddress | awk '{ print $2 }' | head -1 | cut -d"," -f1
                done
              mode: "000755"
              owner: ec2-user
              group: ec2-user
          sources:
            /tmp: !Join ["", [!Ref InstallerPath, !Ref SearchEngineInstaller]]
#          services:
#            sysvinit:
#              iptables:
#                enabled: "true"
#                ensureRunning: "true"
        install_node:
          commands:
            01_print_nodes_in_layer:
              cwd: "/home/ec2-user"
              command: get-asg-nodes.sh '${SearchEngineServerGroup.AutoScalingGroupName}' > searchengine_nodes.txt
            02_execute_installer:
              cwd: "/tmp"
              command: SearchEngine-Installer.sh
#              02_print_database_nodes:
#                cwd: "/home/ec2-user"
#                command: !Sub |
#                  get-asg-nodes.sh ${DatabaseServerGroup.AutoScalingGroupName} > database_nodes.txt
#              03_print_searchengine_nodes:
#                cwd: "/home/ec2-user"
#                command: !Sub |
#                  get-asg-nodes.sh ${SearchEngineServerGroup.AutoScalingGroupName} > searchengine_nodes.txt
  # S3:
  #   Type: "AWS::S3::Bucket"
  #   DeletionPolicy: Retain
#Outputs:
#  wproot:
#    Description: Access URL for Application
#    Value: !Join ["", ["https://", !GetAtt EC2.PublicIp, ":2525"]]
#  wpadmin:
#    Description: Admin Login URL - if restoring from snap, always go to this URL first
#    Value: !Join ["", ["http://", !GetAtt EC2.PublicIp, "/wordpress/wp-login.php"]]
