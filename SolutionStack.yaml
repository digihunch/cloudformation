### Check README.md for details
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Instance Size Configuration"
        Parameters:
          - ApplicationInstanceType
          - DatabaseInstanceType
          - SearchEngineInstanceType
      - 
        Label:
          default: "Install Source Configuration"
        Parameters:
          - InstallerCoordinator
          - InstallerBucketName
      -
        Label:
          default: "Environment Configuration"
        Parameters:
          - EnvironmentSize
          - PubKeyName
    ParameterLabels:
      InstallerCoordinator:
        default: "Zip file for Installer Coordinator"
      EnvironmentSize:
        default: "Stack Size"

Parameters:
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
    Description: Number of nodes per layer. SMALL=1, MEDIUM=3, LARGE=5
  ApplicationInstanceType:
    Type: String
    Default: t2.micro
  DatabaseInstanceType:
    Type: String
    Default: t2.micro
  SearchEngineInstanceType:
    Type: String
    Default: t2.micro
  InstallerCoordinator:
    Type: String
    Default: cli_inst_coord_script.zip
  InstallerBucketName:
    Type: String
    Default: aws-cf-files
  PubKeyName:
    Type: String
    Default: cskey 

# Note: this condition is not used at this stage.
Conditions:
  doCreateLoadBalancer: !Or
    - !Equals [!Ref EnvironmentSize, "MEDIUM"]
    - !Equals [!Ref EnvironmentSize, "LARGE"]

Mappings:
  RegionMap:
    us-east-1:
      AMALINUX: ami-0080e4c5bc078760e
      NATAMI: ami-00a9d4a05375b2763
    us-east-2:
      AMALINUX: ami-0cd3dfa4e37921605
      NATAMI: ami-00d1f8201864cc10c
    us-west-1:
      AMALINUX: ami-0ec6517f6edbf8044
      NATAMI: ami-097ad469381034fa2
    us-west-2:
      AMALINUX: ami-01e24be29428c15b2
      NATAMI: ami-0b840e8a1ce4cdf15
    sa-east-1:
      AMALINUX: ami-05145e0b28ad8e0b2
      NATAMI: ami-057f5d52ff7ae75ae
    ca-central-1:
      AMALINUX: ami-07423fb63ea0a0930
      NATAMI: ami-0b32354309da5bba5
    eu-west-1:
      AMALINUX: ami-08935252a36e25f85
      NATAMI: ami-024107e3e3217a248
    eu-west-2:
      AMALINUX: ami-01419b804382064e4
      NATAMI: ami-0ca65a55561666293
    eu-west-3:
      AMALINUX: ami-0dd7e7ed60da8fb83
      NATAMI: ami-0641e4dfc1427f114
    eu-central-1:
      AMALINUX: ami-0cfbf4f6db41068ac
      NATAMI: ami-06a5303d47fbd8c60
    ap-southeast-1:
      AMALINUX: ami-05b3bcf7f311194b3
      NATAMI: ami-01514bb1776d5c018
    ap-southeast-2:
      AMALINUX: ami-02fd0b06f06d93dfc
      NATAMI: ami-062c04ec46aecd204
    ap-northeast-1:
      AMALINUX: ami-00a5245b4816c38e6
      NATAMI: ami-00d29e4cb217ae06b
    ap-northeast-2:
      AMALINUX: ami-00dc207f8ba6dc919
      NATAMI: ami-0d98591cbf9ef1ffd
    ap-south-1:
      AMALINUX: ami-0ad42f4f66f6c1cc9
      NATAMI: ami-00b3aa8a93dd09c13

  InstanceSpec:
    SMALL:
      InstCnt : 1
      CreationTimeOut: PT5M
    MEDIUM:
      InstCnt : 3
      CreationTimeOut: PT10M
    LARGE:
      InstCnt : 5
      CreationTimeOut: PT20M
  # CreationTimeOut describes how long stack should wait for success signal before considering failure.
Resources:
  EC2InstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "InstallerIAMRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "ec2.amazonaws.com"
      Path: "/"
      ManagedPolicyArns:
        # - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess      # Access to S3 bucket is granted through CloudFormation::Authentication
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess       # This allows EC2 instances to fetch ip address of other EC2 instance through aws cli
        - arn:aws:iam::aws:policy/AutoScalingReadOnlyAccess     # This allows EC2 instances to read auto scaling group information through aws cli

  InstallerAccessUser:
    Type: AWS::IAM::User
    Properties:
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                  - s3:GetObject
                Resource: '*'

  InstallerAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref InstallerAccessUser

  InstallerBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Id: InstallerBucketPolicy
        Statement:
          - Sid: ReadAccess
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref InstallerBucketName
                - /*
            Principal:
              AWS: !GetAtt 'InstallerAccessUser.Arn'
      Bucket: !Ref InstallerBucketName 


# Instance Profile to assign to all EC2 instance created in this solution to avoid permission issues.
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: "InstallerIAMRole"
      Path: "/"
      Roles:
        - Ref: EC2InstanceIAMRole
  SolutionStackVPC:
    Type: AWS::EC2::VPC
    Properties:
       CidrBlock: 10.0.0.0/26
       EnableDnsSupport: true
       EnableDnsHostnames: true
       Tags:
        - Key: Name
          Value: Solution Stack VPC
  SolutionStackIGW:
    Type: AWS::EC2::InternetGateway
    DependsOn: SolutionStackVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SolutionStackVPC
      InternetGatewayId: !Ref SolutionStackIGW
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SolutionStackVPC
      Tags:
       - Key: Name
         Value: Public Route Table
# Public Route directs outgoing traffic to Internet Gateway
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SolutionStackIGW
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SolutionStackVPC
      GroupDescription: App Security Group for Solution servers at app layer
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        ToPort: 22
        FromPort: 22
      - IpProtocol: tcp
        CidrIp: 10.0.0.0/26
        ToPort: 80
        FromPort: 80
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        ToPort: 443
        FromPort: 443
      - IpProtocol: icmp
        FromPort: 8
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: App Security Group for app layer

# Application Subnet is public, Database and SearchEngine subnets are private
  ApplicationSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SolutionStackVPC
      CidrBlock: 10.0.0.0/28
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      Tags:
        - Key: Name
          Value: Application Subnet
  DatabaseSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SolutionStackVPC
      CidrBlock: 10.0.0.16/28
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      Tags:
        - Key: Name
          Value: Database Subnet
  SearchEngineSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SolutionStackVPC
      CidrBlock: 10.0.0.32/28
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ''
      Tags:
        - Key: Name
          Value: Search Engine Subnet

  ApplicationSubnetAssociationWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref ApplicationSubnet

# NAT instance is placed in public subnet and must be based off a NAT image (not a regular Amazon Linux Image!). Security group should allow ICPM and SourceDestCheck must be turned off.
# The instruction also mentions that the route table pointing to NAT instance should be the main route table of VPC, it does not seem to matter though.
  NATInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", NATAMI]
      InstanceType: !Ref ApplicationInstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref PubKeyName
      SubnetId:  !Ref ApplicationSubnet 
      SecurityGroupIds:  
        - !Ref AppSecurityGroup
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: NAT Instance
      UserData:             # NAT instance only needs to configure aws cli environment. 
        "Fn::Base64":       # UserData must be encoded in Base64
          !Sub |
            yum -y update
            aws configure set region ${AWS::Region}
            runuser -l ec2-user -c 'aws configure set region ${AWS::Region}'
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SolutionStackVPC

# Once NAT Instance has been created, add route for private subnet to connect to outside through NAT instance.
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NATInstance
  DatabaseSubnetAssociationWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DatabaseSubnet
  SearchEngineSubnetAssociationWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SearchEngineSubnet

# Private Security Group. More ports to open here based on database addn/or search engine ports.
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SolutionStackVPC
      GroupDescription: Private Security Group for Solution servers at db or se layer
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        ToPort: 22
        FromPort: 22
      - IpProtocol: icmp
        FromPort: 8
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Private Security Group for db or se layers 

# EndPoint Security Group (traffic through private link is encrypted with SSL)
  EndPointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SolutionStackVPC
      GroupDescription: Traffic into VPC Endpoint
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: 0.0.0.0/0
        ToPort: 443
        FromPort: 443
      Tags:
        - Key: Name
          Value: Endpoint Security Group

# CfnEndpoint is a means for private instance to signal AWS CloudFormation WaitConditions through AWS private link, without requiring NAT instance.
# https://aws.amazon.com/blogs/mt/signaling-aws-cloudformation-waitconditions-using-aws-privatelink/
  CfnEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref SolutionStackVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.cloudformation"
      VpcEndpointType: "Interface"
      PrivateDnsEnabled: true
      # Note: if two subnets sits in the same AZ, then only one subnet Id can be specified here. 2019.07.10
      # Specifying a second subnet Id of the same AZ throws error. I think this is bug or at least an ambiguous requirement.
      SubnetIds:
        - !Ref DatabaseSubnet
#        - !Ref SearchEngineSubnet
      SecurityGroupIds:
        - !Ref EndPointSecurityGroup


# Launch config for all three layers defines the EC2 instance spec, their user data and CloudFormation::Init is placed in metadata of launch config
# calling cfn-init from user data allows the EC2 instance, upon launching, to execute configsets defined in metadata of the same resource
# cfn-hup allows CloudFormation::Init to be executed upon stack updates (using triggers=post.update).

# To troubleshoot AWS::CloudFormation::Init, manually run the following on the server with correct stack name
# sudo /opt/aws/bin/cfn-init --stack mytest --resource ApplicationLaunchConfig --configsets solution_cs --region us-east-1
# sources config key only supports zip, tar and no other extensions!
  ApplicationLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: InstallerBucketPolicy
    Properties: 
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !Ref ApplicationInstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref PubKeyName
      SecurityGroups:
        - !Ref AppSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            aws configure set region ${AWS::Region}
            runuser -l ec2-user -c 'aws configure set region ${AWS::Region}'
            runuser -l ec2-user -c 'echo ApplicationServerGroup > /home/ec2-user/role.info'
            yum update -y aws-cfn-bootstrap
            yum -y update
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ApplicationLaunchConfig --configsets solution_cs
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ApplicationServerGroup
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          accessKeyId: !Ref InstallerAccessKey
          secretKey: !GetAtt InstallerAccessKey.SecretAccessKey
          buckets:
            - !Ref InstallerBucketName
      AWS::CloudFormation::Init:
        configSets:
          solution_cs:
            - "configure_cfn"
            - "prepare_install"
            - "install_node"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ApplicationLaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ApplicationLaunchConfig --configsets solution_cs
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        prepare_install:
          packages:
            yum:
              jq: []
          sources:
            # Note: the two sources must be have different destination because YAML does not allow two entries of the same key name.
            /home/ec2-user: !Join ["", ["https://", !Ref InstallerBucketName, ".s3.amazonaws.com/", !Ref InstallerCoordinator]]
        install_node:
          commands:
            01_print_nodes_info:
              cwd: "/home/ec2-user"
              command: /home/ec2-user/get-selfinfo.sh
            02_launch_install_coordinator:
              cwd: "/home/ec2-user"
              command: /home/ec2-user/inst-coordinator.sh

  DatabaseLaunchConfig:
    DependsOn: 
      - DatabaseSubnetAssociationWithRouteTable
      - InstallerBucketPolicy
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !Ref DatabaseInstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      AssociatePublicIpAddress: false
      KeyName: !Ref PubKeyName
      SecurityGroups:
        - !Ref PrivateSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            aws configure set region ${AWS::Region}
            runuser -l ec2-user -c 'aws configure set region ${AWS::Region}'
            runuser -l ec2-user -c 'echo DatabaseServerGroup > /home/ec2-user/role.info'
            yum update -y aws-cfn-bootstrap
            yum -y update
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DatabaseLaunchConfig --configsets solution_cs
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DatabaseServerGroup
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          accessKeyId: !Ref InstallerAccessKey
          secretKey: !GetAtt InstallerAccessKey.SecretAccessKey
          buckets:
            - !Ref InstallerBucketName
      AWS::CloudFormation::Init:
        configSets:
          solution_cs:
            - "configure_cfn"
            - "prepare_install"
            - "install_node"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.DatabaseLaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DatabaseLaunchConfig --configsets solution_cs
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        prepare_install:
          packages:
            yum:
              jq: []
          sources:
            /home/ec2-user: !Join ["", ["https://", !Ref InstallerBucketName, ".s3.amazonaws.com/", !Ref InstallerCoordinator]]
        install_node:
          commands:
            01_print_nodes_info:
              cwd: "/home/ec2-user"
              command: /home/ec2-user/get-selfinfo.sh
            02_launch_install_coordinator:
              cwd: "/home/ec2-user"
              command: /home/ec2-user/inst-coordinator.sh

  SearchEngineLaunchConfig:
    DependsOn: 
      - SearchEngineSubnetAssociationWithRouteTable
      - InstallerBucketPolicy
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]
      InstanceType: !Ref SearchEngineInstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      AssociatePublicIpAddress: false
      KeyName: !Ref PubKeyName
      SecurityGroups:
        - !Ref PrivateSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            aws configure set region ${AWS::Region}
            runuser -l ec2-user -c 'aws configure set region ${AWS::Region}'
            runuser -l ec2-user -c 'echo SearchEngineServerGroup > /home/ec2-user/role.info'
            yum update -y aws-cfn-bootstrap
            yum -y update
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SearchEngineLaunchConfig --configsets solution_cs
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SearchEngineServerGroup
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          accessKeyId: !Ref InstallerAccessKey
          secretKey: !GetAtt InstallerAccessKey.SecretAccessKey
          buckets:
            - !Ref InstallerBucketName
      AWS::CloudFormation::Init:
        configSets:
          solution_cs:
            - "configure_cfn"
            - "prepare_install"
            - "install_node"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.SearchEngineLaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource SearchEngineLaunchConfig --configsets solution_cs
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        prepare_install:
          packages:
            yum:
              jq: []
          sources:
            /home/ec2-user: !Join ["", ["https://", !Ref InstallerBucketName, ".s3.amazonaws.com/", !Ref InstallerCoordinator]]
        install_node:
          commands:
            01_print_nodes_info:
              cwd: "/home/ec2-user"
              command: /home/ec2-user/get-selfinfo.sh 
            02_launch_install_coordinator:
              cwd: "/home/ec2-user"
              command: /home/ec2-user/inst-coordinator.sh

# AutoScalingGroups only load corresponding launch configurations. userdata and metadata are NOT stored in AutoScalingGroups.

  ApplicationServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Ref: ApplicationSubnet
      LaunchConfigurationName:
        Ref: ApplicationLaunchConfig
      MinSize: !FindInMap [InstanceSpec, !Ref EnvironmentSize, InstCnt]
      MaxSize: !FindInMap [InstanceSpec, !Ref EnvironmentSize, InstCnt]
      Tags:
        - Key: Name
          Value: Application Node
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [InstanceSpec, !Ref EnvironmentSize, InstCnt]
        Timeout: !FindInMap [InstanceSpec, !Ref EnvironmentSize, CreationTimeOut]
    DeletionPolicy: Delete

  DatabaseServerGroup:
    DependsOn: 
      - CfnEndpoint
      - NATInstance
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Ref: DatabaseSubnet
      LaunchConfigurationName: !Ref DatabaseLaunchConfig
      MinSize: !FindInMap [InstanceSpec, !Ref EnvironmentSize, InstCnt]
      MaxSize: !FindInMap [InstanceSpec, !Ref EnvironmentSize, InstCnt]
      Tags:
        - Key: Name
          Value: Database Node
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [InstanceSpec, !Ref EnvironmentSize, InstCnt]
        Timeout: !FindInMap [InstanceSpec, !Ref EnvironmentSize, CreationTimeOut]
    DeletionPolicy: Delete

  SearchEngineServerGroup:
    DependsOn: 
      - CfnEndpoint
      - NATInstance
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Ref: SearchEngineSubnet
      LaunchConfigurationName: !Ref SearchEngineLaunchConfig
      MinSize: !FindInMap [InstanceSpec, !Ref EnvironmentSize, InstCnt]
      MaxSize: !FindInMap [InstanceSpec, !Ref EnvironmentSize, InstCnt]
      Tags:
        - Key: Name
          Value: Search Engine Node
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !FindInMap [InstanceSpec, !Ref EnvironmentSize, InstCnt]
        Timeout: !FindInMap [InstanceSpec, !Ref EnvironmentSize, CreationTimeOut]
    DeletionPolicy: Delete

Outputs:
  BastionHostInfo:
    Description: Baston Host address
    Value: !Join ["", ["ssh ec2-user@", !GetAtt NATInstance.PublicIp]]
